
# importing pandas for the data
# importing matplotlib.pyplot: for plotting of the graphs
import pandas as pd 
import matplotlib.pyplot as plt


# mapping the bank names to their CSV filepath
# now I can loop once and keep the bank label tied to all the data
files = {
    "Bank of America": "BAC.csv",
    "Citigroup": "CITIGROUP.csv",
    "Wells Fargo": "WFC.csv",
    "JPMorgan Chase": "JPM.csv",
}

# loading all the data and combining 
dfs = []  # will hold each bank's DataFrame
for bank, path in files.items():
    df = pd.read_csv(path)     # read the CSV into the dataFrame
    df["Bank"] = bank          # adding a column identifying the bank so that I can plot by it
    dfs.append(df)             # collect for concatinating

# pd.concat stacks the DataFrames on top of each other into one big table
# ignore_index=True resets the index from 0..N-1 after concatenation.
combo = pd.concat(dfs, ignore_index=True)

# makes sure that certain columns are numeric values. If a value can’t be converted, then it turns into a missing value so that an error doesnt occur
# errors="coerce" turns it into a missing value
for c in ["Year", "ROE"]:
    combo[c] = pd.to_numeric(combo[c], errors="coerce")

# graph 1 ROE over time
# plt.figure creates a new empty figure with width=10 inches and height=6 inches
plt.figure(figsize=(10, 6))

# group rows by bank so that I can plot a separate line for each bank
for bank, g in combo.groupby("Bank"):
    # sorts each bank’s data by year
    g = g.sort_values("Year")

    # plt.plot plots a line. 'label' is the legend text for the line
    plt.plot(g["Year"], g["ROE"], label=bank)

# the axis labels
plt.xlabel("Year")
plt.ylabel("ROE")

# title shown above the plot
plt.title("Return on Equity (2005–2024)")

# plt.legend() draws the legend using the 'label=' I gave to plt.plot
plt.legend()

# shading the events
# plt.axvspan(xmin, xmax, alpha=..., color=...)
# alpha is just for the transparency of the highlight
plt.axvspan(2008, 2009, alpha=0.1)     # Global Financial Crisis
plt.axvspan(2020, 2020.9, alpha=0.1)   # COVID 
plt.axvspan(2022, 2024, alpha=0.05)    # Rate-hike cycle

# plt.tight_layout() automatically adjusts padding so that my labels/titles aren’t cut off
plt.tight_layout()

# plt.show() brings the figure to the screen so show it
plt.show()

# graph 2 ROA over time
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    plt.plot(g["Year"], g["ROA"], label=bank)

plt.xlabel("Year")
plt.ylabel("ROA")
plt.title("Return on Assets (2005–2024)")
plt.legend()

# Same shaded windows
plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()

# graph 3 profit margin
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    # in case some CSVs don’t have this column
    if "Profit Margin" in g.columns:
        plt.plot(g["Year"], g["Profit Margin"], label=bank)

plt.xlabel("Year")
plt.ylabel("Profit Margin")
plt.title("Profit Margin (2005–2024)")
plt.legend()

plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()

# graph 4 asset turnover 
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    if "Asset Turnover" in g.columns:
        # Asset Turnover = Revenue / Assets (unitless ratio), plotted over time.
        plt.plot(g["Year"], g["Asset Turnover"], label=bank)

plt.xlabel("Year")
plt.ylabel("Asset Turnover (Revenue / Assets)")
plt.title("Asset Turnover (2005–2024)")
plt.legend()

plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()

# -------------- GRAPH 5: Equity-to-Assets over time --------------
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    if "Equity_to_Assets" in g.columns:
        plt.plot(g["Year"], g["Equity_to_Assets"], label=bank)

plt.xlabel("Year")
plt.ylabel("Equity-to-Assets Ratio")
plt.title("Equity-to-Assets Ratio (2005–2024)")
plt.legend()

plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()

# -------------- GRAPH 6: Total Revenue over time --------------
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    # Assumes "Total Revenue" is numeric (e.g., USD in millions). If not, convert like earlier.
    plt.plot(g["Year"], g["Total Revenue"], label=bank)

plt.xlabel("Year")
plt.ylabel("Revenue (USD Millions)")
plt.title("Total Revenue (2005–2024)")
plt.legend()

plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()

# -------------- GRAPH 7: Net Income over time --------------
plt.figure(figsize=(10, 6))
for bank, g in combo.groupby("Bank"):
    g = g.sort_values("Year")
    plt.plot(g["Year"], g["Net Income"], label=bank)

plt.xlabel("Year")
plt.ylabel("Net Income (USD Millions)")
plt.title("Net Income (2005–2024)")
plt.legend()

plt.axvspan(2008, 2009, alpha=0.1)
plt.axvspan(2020, 2020.9, alpha=0.1)
plt.axvspan(2022, 2024, alpha=0.05)

plt.tight_layout()
plt.show()
